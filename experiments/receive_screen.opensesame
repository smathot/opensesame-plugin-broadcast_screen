# Generated by OpenSesame 2.9.5~pre8 (Hesitant Heisenberg)
# Wed Apr  1 11:54:12 2015 (posix)
# <http://www.cogsci.nl/opensesame>

set background "black"
set bidi "no"
set canvas_backend "droid"
set compensation "0"
set coordinates "relative"
set description "An experiment that receives screens sent by the broadcast_screen plug-in"
set font_bold "no"
set font_family "sans"
set font_italic "no"
set font_size "32"
set foreground "white"
set height "800"
set keyboard_backend "droid"
set mouse_backend "droid"
set sampler_backend "legacy"
set start "experiment"
set subject_nr "0"
set subject_parity "even"
set synth_backend "droid"
set title "receive_screen"
set width "1280"

define sketchpad connected
	set duration "0"
	set reset_variables "no"

define sequence experiment
	run get_ip "always"
	run start "never"
	run waiting "never"
	run connected "never"
	run listener "always"

define inline_script get_ip
	___prepare__
	import socket
	try:
		s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
		s.connect(('www.google.com', 0))
		local_ip = s.getsockname()[0]
	except:
		local_ip = 'unknown'
	exp.set('local_ip', local_ip)
	__end__
	set _run ""

define inline_script listener
	set _prepare ""
	___run__
	import socket
	import json
	import pygame
	import base64
	import zlib
	
	host = ''
	port = 50008
	size = 1024
	w = self.get('width')
	h = self.get('height')
	
	# Listen for incoming connections
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.bind((host, port))
	
	while True:
		
		pygame.event.clear()
		exp.items['start'].run()
		exp.items['waiting'].run()
	
		s.listen(1)
		conn, addr = s.accept()
		exp.items['connected'].run()
	
		# Listen for incoming commands
		surfaces = {}
		active = True
		while active:	
			data = ''
			# Each command is a JSON string, with a "[length]:" prefix. This length
			# prefix specifies how many bytes we should collect
			length = None
			while True:
				chunk = conn.recv(size)
				if not chunk:
					active = False
					break
				data += chunk
				if length is None:
					if ':' not in data:
						continue
					length, ignored, data = data.partition(':')
					length = int(length)
				if length is not None and len(data) == length:
					break
			# Confirm that the command has been received and unpack the data
			conn.sendall('ok')
			d = json.loads(data)
			print(u'received %s (%d bytes)' % (d['cmd'], len(data)))
			# Show a previously prepared image
			if d['cmd'] == 'show':
				surf, x, y, color = surfaces[d['id']]
				win.fill(color)
				win.blit(surf, (x, y))
				pygame.display.flip()
				del surfaces[d['id']]
			# Prepare incoming images
			elif d['cmd'] == 'prepare':
				data = base64.b64decode(d['data'])
				if d['compress'] == 'gzip':
					data = zlib.decompress(data)
				surf = pygame.image.fromstring(data, (d['w'], d['h']), d['mode'])
				color = pygame.Color(str(d['background']))
				x = w/2 - d['w']/2
				y = h/2 - d['h']/2			
				surfaces[d['id']] = surf, x, y, color
			# Close the connection
			elif d['cmd'] == 'close':
				active = False
	s.close()
	__end__

define sketchpad start
	set duration "mouseclick"
	set reset_variables "no"
	draw textline 0 0 "Tap or click to listen for connections<br /><br />The local ip address is: [local_ip]<br /><br />Press back or escape to quit" center=1 color="white" font_family="serif" font_size=32 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"

define sketchpad waiting
	set duration "0"
	set reset_variables "no"
	draw textline 0 0 "Waiting for connection ..." center=1 color="white" font_family="serif" font_size=32 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"


# Generated by OpenSesame 2.9.5~pre7 (Hesitant Heisenberg)
# Wed Mar 25 17:17:25 2015 (posix)
# <http://www.cogsci.nl/opensesame>

set background "black"
set bidi "no"
set canvas_backend "droid"
set compensation "0"
set coordinates "relative"
set description "An experiment that receives screens sent by the broadcast_screen plug-in"
set font_bold "no"
set font_family "mono"
set font_italic "no"
set font_size "18"
set foreground "white"
set height "800"
set keyboard_backend "droid"
set mouse_backend "droid"
set sampler_backend "legacy"
set start "experiment"
set subject_nr "0"
set subject_parity "even"
set synth_backend "droid"
set title "receive_screen"
set width "1280"

define sketchpad connected
	set duration "0"
	set reset_variables "no"

define sequence experiment
	run waiting "always"
	run connected "never"
	run listener "always"

define inline_script listener
	set _prepare ""
	___run__
	import socket
	import json
	import pygame
	import base64
	
	host = ''
	port = 50008
	size = 1024
	w = self.get('width')
	h = self.get('height')
	
	# Listen for incoming connections
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.bind((host, port))
	s.listen(1)
	conn, addr = s.accept()
	exp.items['connected'].run()
	
	# Listen for incoming commands
	surfaces = {}
	active = True
	while active:	
		data = ''
		# Each command is a JSON string, with a "[length]:" prefix. This length
		# prefix specifies how many bytes we should collect
		length = None
		while True:
			chunk = conn.recv(size)
			if not chunk:
				active = False
				break
			data += chunk
			if length is None:
				if ':' not in data:
					continue
				length, ignored, data = data.partition(':')
				length = int(length)
			if length is not None and len(data) == length:
				break
		# Confirm that the command has been received and unpack the data
		conn.sendall('ok')	
		d = json.loads(data)
		print(u'received %s (%d bytes)' % (d['cmd'], len(data)))
		# Prepare incoming images
		if d['cmd'] == 'prepare':		
			surf = pygame.image.fromstring(base64.b64decode(d['data']),
				(d['w'], d['h']), d['mode'])
			x = w/2 - d['w']/2
			y = h/2 - d['h']/2			
			surfaces[d['id']] = surf, x, y
		# Show a previously prepared image
		elif d['cmd'] == 'show':
			surf, x, y = surfaces[d['id']]
			win.blit(surf, (x, y))
			pygame.display.flip()
		# Close the connection
		elif d['cmd'] == 'close':
			active = False
	s.close()
	__end__

define sketchpad waiting
	set duration "0"
	set reset_variables "no"
	draw textline 0 0 "Waiting for connection ..." center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"


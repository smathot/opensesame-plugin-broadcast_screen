---
API: 2
OpenSesame: 3.1.7a2
Platform: posix
---
set width 1280
set uniform_coordinates no
set title receive_screen
set synth_backend droid
set subject_parity even
set subject_nr 0
set start experiment
set sound_sample_size -16
set sound_freq 48000
set sound_channels 2
set sound_buf_size 1024
set sampler_backend legacy
set round_decimals 2
set mouse_backend droid
set keyboard_backend droid
set height 800
set fullscreen no
set form_clicks no
set foreground white
set font_underline no
set font_size 32
set font_italic no
set font_family sans
set font_bold no
set experiment_path "/home/sebastiaan/git/opensesame-plugin-broadcast_screen/experiments"
set disable_garbage_collection yes
set description "An experiment that receives screens sent by the broadcast_screen plug-in"
set coordinates relative
set compensation 0
set canvas_backend droid
set bidi no
set background black

define sketchpad connected
	set reset_variables no
	set duration 0
	set description "Displays stimuli"

define sequence experiment
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run get_ip always
	run start never
	run waiting never
	run connected never
	run listener always

define inline_script get_ip
	set description "Executes Python code"
	set _run ""
	___prepare__
	import socket
	try:
		s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
		s.connect(('www.google.com', 0))
		local_ip = s.getsockname()[0]
	except:
		local_ip = 'unknown'
	var.local_ip = local_ip
	__end__

define inline_script listener
	set description "Executes Python code"
	___run__
	import socket
	import json
	import pygame
	import base64
	import zlib
	
	host = ''
	port = 50008
	size = 1024
	w = var.width
	h = var.height
	
	# Listen for incoming connections
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.bind((host, port))
	
	while True:
		
		pygame.event.clear()
		items['start'].run()
		items['waiting'].run()
	
		s.listen(1)
		conn, addr = s.accept()
		items['connected'].run()
	
		# Listen for incoming commands
		surfaces = {}
		active = True
		while active:	
			data = ''
			# Each command is a JSON string, with a "[length]:" prefix. This length
			# prefix specifies how many bytes we should collect
			length = None
			while True:
				chunk = conn.recv(size)
				if not chunk:
					active = False
					break
				data += chunk
				if length is None:
					if ':' not in data:
						continue
					length, ignored, data = data.partition(':')
					length = int(length)
				if length is not None and len(data) == length:
					break
			if not data:
				continue
			d = json.loads(data)
			print(u'received %s (%d bytes, cid %d)' % (d['cmd'], len(data),
				d['cid']))
			# Show a previously prepared image
			if d['cmd'] == 'show':
				surf, x, y, color = surfaces[d['id']]
				win.fill(color)
				win.blit(surf, (x, y))
				pygame.display.flip()
				del surfaces[d['id']]
			# Prepare incoming images
			elif d['cmd'] == 'prepare':
				data = base64.b64decode(d['data'])
				if d['compress'] == 'gzip':
					data = zlib.decompress(data)
				surf = pygame.image.fromstring(data, (d['w'], d['h']), d['mode'])
				color = pygame.Color(str(d['background']))
				x = w/2 - d['w']/2
				y = h/2 - d['h']/2			
				surfaces[d['id']] = surf, x, y, color
			# Close the connection
			elif d['cmd'] == 'close':
				active = False
			# Confirm that the command has been received and unpack the data
			conn.sendall('ok')			
	s.close()
	__end__
	set _prepare ""

define sketchpad start
	set reset_variables no
	set duration mouseclick
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=serif font_italic=no font_size=32 html=yes show_if=always text="Tap or click to listen for connections<br /><br />The local ip address is: [local_ip]<br /><br />Press back or escape to quit" x=0 y=0 z_index=0

define sketchpad waiting
	set reset_variables no
	set duration 0
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=serif font_italic=no font_size=32 html=yes show_if=always text="Waiting for connection ..." x=0 y=0 z_index=0

